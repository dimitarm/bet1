#include <boost/program_options.hpp>
#include <iostream>
#include <fstream>

#include "ProcedureFrame.h"
#include "Patient.h"
#include "Graphic.h"
#include <wx/timer.h>
#include "CProtocol.h"

#ifndef __BetBaseProcedureFrame__
#define __BetBaseProcedureFrame__

/**
@file
Subclass of BaseProcedureFrame, which is generated by wxFormBuilder.
*/

#define STATE_ERROR -1
#define STATE_INITIAL 0
#define STATE_RUNNING 1
#define STATE_FINISHING 2

#define SW_FAILURE -1
#define SW_OFF 0
#define SW_ON 1
#define CABLE_IN 0
#define CABLE_OUT 1
#define KEY_SHORT 0
#define KEY_ON 1
#define KEY_OFF 2
#define KEY_BREAK 3
namespace po = boost::program_options;

/** Implementing BaseProcedureFrame */
class BetProcedureFrame : public BaseProcedureFrame
{
	Graphic 	currents_graphic_;
	Graphic 	voltage_graphic_;
	const wxBitmap  lightR_;
	const wxBitmap  lightG_;
	const wxBitmap  lightS_;
	int patient_id_;
	int switch1_;  //-1 failure 0 - switch off 1 - switch on
	int switch2_;
	int switch3_;
	int switch4_;
	int switch5_;
	int switch6_;
	int cable_;
	int key_;
	bool polarity_;
	float voltage_;
	float decrease_speed_;
	float regulator_speed_;
	unsigned int r_min_value_;
	unsigned int alarm_time_;
	unsigned int r_alarm_value_;
	unsigned int r_max_value_;
	unsigned int r_max_hist_value_;
	unsigned int time_to_end_;
	unsigned int v_check_value_;
	float voltages_[7];
	float currents_[7];
	float q_;
	float duration_;  //whole duration of the treatment
	int state_;  //-1 error, 0 initial, 1 - test, 2 - running, 3 - finished,
	unsigned int conf_channel_alarm_wait_;

	wxTimer my_timer_;
	CProtocol protocol_;
	unsigned int counter_r_[6];
	unsigned int counter_open_r_[6];
	bool signal_r_[6];
	bool signal_open_r_[6];

	po::variables_map options_;

	void parseOptions();
	void changeSwitch(bool _switch, wxStaticBitmap* ctl);
	void updateFloatValue(float value, wxStaticText* ctl);
	void updateFloatValue(float value, wxTextCtrl* ctl);
	void updateIntegerValue(unsigned int value, wxStaticText* ctl);
	void updateIntegerValue(unsigned int value, wxTextCtrl* ctl) ;
	void updateDurationValue(unsigned int value, wxTextCtrl* ctl) ;
	void updateSwitchesStatus(int address, float status);
	void updateKeyChannel(int status);
	void checkR(int address);
	static void showMessage(std::string msg, std::string title);

protected:
	// Handlers for BaseProcedureFrame events.
	void OnClose( wxCloseEvent& event );
	void OnVoltage1( wxCommandEvent& event );
	void OnVoltageM1( wxCommandEvent& event );
	void OnVoltageM5( wxCommandEvent& event );
	void OnCurrent1( wxCommandEvent& event );
	void OnCurrentM1( wxCommandEvent& event );
	void OnDuration1( wxCommandEvent& event );
	void OnDurationM1( wxCommandEvent& event );
	void OnPolarity( wxCommandEvent& event );
	void OnStart( wxCommandEvent& event );
	void OnStop( wxCommandEvent& event );
	void OnTimer(wxTimerEvent& event);
	void OnSwitchChange( wxMouseEvent& event );
	void OnKeyEvent( wxKeyEvent& event);

	CProtocolCommand sendCommand2Values(char cmd, unsigned char address, unsigned int value1, unsigned int value2, int reply_len, void (BetProcedureFrame::*handler)(const std::string&, CProtocolCommand&), const std::string& error_message, const command_data& data);
	CProtocolCommand sendCommand(char cmd, unsigned char address, unsigned int value, int reply_len, void (BetProcedureFrame::*handler)(const std::string&, CProtocolCommand&), const std::string& error_message, const command_data& data);
	CProtocolCommand sendCommand2BytesValue(char cmd, unsigned char address, unsigned int value, int reply_len, void (BetProcedureFrame::*handler)(const std::string&, CProtocolCommand&), const std::string& error_message, const command_data& data);
	CProtocolCommand sendCommand(char cmd, unsigned char address, int reply_len, void (BetProcedureFrame::*handler)(const std::string&, CProtocolCommand&), const std::string& error_message, const command_data& data);

	void DoTerminate();
	void DoGoInInitialState();
	void DoSwitchChange(int sw);
	void DoStart();
	void DoUpdateCurrent(int current);
	void DoSendZumer();
	void DoUpdateVoltage(float voltage);
	void DoPolarityChange();
	void DoUpdateCurrentLimit(int current, int value);
	void DoUpdateDuration(unsigned int time);
	void DoUpdateSwitches();
	void DoUpdateSwitches(int releta);
	void DoZeroSwitches();
	void DoGoInFinishing();
	void DoGoInRunning();

	void handlerTerminateProcedure(const std::string& reply, CProtocolCommand& command);
	void handlerDummy(const std::string& reply, CProtocolCommand& command);
	void HandlerRead(const std::string& reply, CProtocolCommand& command);
	void HandlerVoltage(const std::string& reply, CProtocolCommand& command);
	void HandlerCurrent(const std::string& reply, CProtocolCommand& command);
	void HandlerSwitchChange(const std::string& reply, CProtocolCommand& command);
	void HandlerDuration(const std::string& reply, CProtocolCommand& command);
	void HandlerStart(const std::string& reply, CProtocolCommand& command);

	bool validate();
	bool ValidateControl(wxTextCtrl* ctrl, int low_limit, int limit, const char* low_message, const char* message);

	float calculateR();
	float calculateQ();

public:
	/** Constructor */
	BetProcedureFrame( wxWindow* parent, const Patient& patient);
	virtual ~BetProcedureFrame();
	const wxImage& getCurrentsImage();
	const wxImage& getVoltageImage();
	float getDuration();
	float getQ();
};

#endif // __BetBaseProcedureFrame__
